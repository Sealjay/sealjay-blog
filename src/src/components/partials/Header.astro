---
import { SITE_NAV } from "../../consts";
import Container from "../containers/Container.astro";
import HeaderLink from "./HeaderLink.astro";
const { pathname } = Astro.url;
---

<header class="relative py-4 sm:py-5">
  <Container>
    <nav class="relative flex items-center justify-between">
      <div class="flex items-center">
        <a href="/" aria-label="Home" class="block group">
          <div class="overflow-hidden rounded-full">
            <img
              src="/chris/avatar.jpg"
              alt=""
              sizes="(min-width: 640px) 2.5rem, 2.25rem"
              class="h-10 w-10 sm:h-11 sm:w-11 rounded-full bg-zinc-100 object-cover dark:bg-zinc-800 ring-2 ring-accent-200 dark:ring-accent-500/20 transition-all duration-300 ease-out transform group-hover:scale-105"
              loading="eager"
            />
          </div>
        </a>
      </div>

      <div class="flex items-center justify-end">
        <div class="hidden md:block">
          <ul
            class="flex items-center gap-1 rounded-full bg-white/90 px-3 py-1.5 text-sm font-medium text-zinc-800 shadow-lg shadow-zinc-800/5 ring-1 ring-zinc-900/5 backdrop-blur dark:bg-zinc-800/90 dark:text-zinc-200 dark:ring-white/10"
          >
            {
              SITE_NAV.map((navitem) => (
                <li>
                  <a
                    href={navitem.path}
                    class:list={[
                      "px-4 py-2 rounded-full relative transition-all duration-200 ease-out inline-block",
                      pathname === navitem.path || pathname === navitem.path.replace(/\/$/, "") 
                        ? "text-white dark:text-white bg-accent-600 dark:bg-accent-500 shadow-sm" 
                        : "text-zinc-700 dark:text-zinc-200 hover:text-accent-600 dark:hover:text-accent-400 hover:bg-zinc-100 dark:hover:bg-zinc-700/70"
                    ]}
                  >
                    <span class="relative z-10">{navitem.name}</span>
                  </a>
                </li>
              ))
            }
          </ul>
        </div>

        <button
          type="button"
          class="ml-4 md:hidden flex items-center justify-center rounded-full p-2 text-zinc-500 hover:bg-zinc-100 hover:text-accent-600 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-accent-500 dark:text-zinc-400 dark:hover:bg-zinc-800 transition-colors"
          aria-label="Toggle menu"
          id="mobile-menu-button"
          aria-expanded="false"
        >
          <svg class="block h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="menu-open-icon">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
          <svg class="hidden h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="menu-close-icon">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </nav>

    <!-- Mobile menu -->
    <div class="hidden md:hidden absolute inset-x-0 top-full mt-4 z-50 origin-top transform transition" id="mobile-menu">
      <div class="rounded-xl bg-white/95 p-3 shadow-lg shadow-zinc-800/5 ring-1 ring-zinc-900/5 backdrop-blur-lg dark:bg-zinc-800/95 dark:text-zinc-200 dark:ring-zinc-800">
        <ul class="flex flex-col space-y-1">
          {
            SITE_NAV.map((navitem) => (
              <li>
                <a
                  href={navitem.path}
                  class:list={[
                    "block px-4 py-2.5 rounded-lg text-base font-medium transition-all duration-200",
                    pathname === navitem.path || pathname === navitem.path.replace(/\/$/, "") 
                      ? "text-white bg-accent-600 dark:bg-accent-500" 
                      : "text-zinc-700 hover:bg-zinc-100 hover:text-accent-600 dark:text-zinc-200 dark:hover:bg-zinc-700/70 dark:hover:text-accent-400"
                  ]}
                >
                  {navitem.name}
                </a>
              </li>
            ))
          }
        </ul>
      </div>
    </div>
  </Container>
</header>

<script>
  // Enhanced mobile menu functionality with animations
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuOpenIcon = document.getElementById('menu-open-icon');
    const menuCloseIcon = document.getElementById('menu-close-icon');

    if (mobileMenuButton && mobileMenu && menuOpenIcon && menuCloseIcon) {
      mobileMenuButton.addEventListener('click', () => {
        const expanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
        mobileMenuButton.setAttribute('aria-expanded', !expanded ? 'true' : 'false');
        
        if (!expanded) {
          // Add animation classes when opening
          mobileMenu.classList.remove('hidden');
          mobileMenu.classList.add('animate-fade-in');
          menuOpenIcon.classList.add('hidden');
          menuCloseIcon.classList.remove('hidden');
        } else {
          // Close with animation
          mobileMenu.classList.add('hidden');
          mobileMenu.classList.remove('animate-fade-in');
          menuOpenIcon.classList.remove('hidden');
          menuCloseIcon.classList.add('hidden');
        }
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', (event) => {
        const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
        if (isExpanded && !mobileMenu.contains(event.target) && !mobileMenuButton.contains(event.target)) {
          mobileMenuButton.setAttribute('aria-expanded', 'false');
          mobileMenu.classList.add('hidden');
          mobileMenu.classList.remove('animate-fade-in');
          menuOpenIcon.classList.remove('hidden');
          menuCloseIcon.classList.add('hidden');
        }
      });
    }
  });
</script>

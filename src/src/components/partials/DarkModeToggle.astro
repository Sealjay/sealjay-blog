---
---

<mode-toggle class="flex">
  <button
    class="justify-self-end relative bg-zinc-100 dark:bg-zinc-700 ml-4 inline-flex h-6 w-11 items-center rounded-full transition-colors duration-300 ease-in-out hover:bg-zinc-200 dark:hover:bg-zinc-600 focus:outline-none focus:ring-2 focus:ring-accent-500/50"
    aria-label="Toggle dark mode"
    id="theme-toggle"
  >
    <span class="sr-only">Toggle dark mode</span>
    <span
      id="mode-circle"
      class="invisible inline-block h-4 w-4 transform rounded-full bg-accent-500 shadow-md transition-transform duration-300 ease-in-out dark:bg-accent-400 translate-x-1 dark:translate-x-6"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 scale-75 text-white dark:text-zinc-900" viewBox="0 0 20 20" fill="currentColor">
        <path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd" class="dark:hidden" />
        <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" class="hidden dark:block" />
      </svg>
    </span>
  </button>
</mode-toggle>

<script>
  function updateHTMLTheme(mode: "light" | "dark") {
    const themeColorMetaTag = document.head.querySelector(
      'meta[name="theme-color"]'
    );

    if (mode === "dark") {
      document.documentElement.classList.remove("light");
      document.documentElement.classList.add("dark");
      if (themeColorMetaTag) {
        // @ts-ignore
        themeColorMetaTag.content = "#000000";
      }
      
      // Save preference to localStorage
      localStorage.setItem("theme", "dark");
    } else {
      document.documentElement.classList.remove("dark");
      document.documentElement.classList.add("light");
      if (themeColorMetaTag) {
        // @ts-ignore
        themeColorMetaTag.content = "#ffffff";
      }
      
      // Save preference to localStorage
      localStorage.setItem("theme", "light");
    }
  }
  
  class ModeToggle extends HTMLElement {
    constructor() {
      super();
      
      // Get user preference from localStorage or system preference
      let currentMode: "light" | "dark";
      
      if (localStorage.getItem("theme") === "dark" || 
         (!localStorage.getItem("theme") && window.matchMedia("(prefers-color-scheme: dark)").matches)) {
        currentMode = "dark";
        updateHTMLTheme("dark");
      } else {
        currentMode = "light";
        updateHTMLTheme("light");
      }

      const toggle = this.querySelector("button");
      const iconElem = toggle?.querySelector("#mode-circle");

      if (iconElem) {
        // set the toggle mode based on current mode
        if (currentMode === "dark") {
          iconElem.classList.add("translate-x-6");
          iconElem.classList.remove("translate-x-1");
        } else {
          iconElem.classList.add("translate-x-1");
          iconElem.classList.remove("translate-x-6");
        }

        // we load the toggle invisible to prevent flash
        // remove visibility class after setting initial dark/light class
        iconElem.classList.remove("invisible");

        // Each time the button is clicked, update the theme
        toggle?.addEventListener("click", () => {
          if (currentMode === "dark") {
            const modeToSwitch = "light";
            iconElem.classList.remove("translate-x-6");
            iconElem.classList.add("translate-x-1");
            updateHTMLTheme(modeToSwitch);
            currentMode = modeToSwitch;
          } else {
            const modeToSwitch = "dark";
            iconElem.classList.remove("translate-x-1");
            iconElem.classList.add("translate-x-6");
            updateHTMLTheme(modeToSwitch);
            currentMode = modeToSwitch;
          }
        });
      }
    }
  }

  customElements.define("mode-toggle", ModeToggle);
</script>

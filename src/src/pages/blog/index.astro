---
import Layout from "../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import FormattedDate from "../../components/partials/FormattedDate.astro";
import Card from "../../components/partials/Card.astro";
import { format } from 'date-fns';

const posts = (await getCollection("blog")).sort(
    (b, a) => a.data.pubDateTime.valueOf() - b.data.pubDateTime.valueOf()
);
const groupedPosts = posts.reduce((acc, post) => {
  const date = new Date(post.data.pubDateTime);
  const monthYearKey = format(date, 'yyyy-MM');
  acc[monthYearKey] = [...(acc[monthYearKey] || []), post];
  return acc;
}, {});
const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
const lastPostDate = new Date(posts[0].data.pubDateTime);
---

<Layout
    title="Writing on topics from software to society"
    description="Writing on topics from software to society"
    pubDateTime={new Date("1 March 2023")}
    updatedDate={lastPostDate}
    heroImage="/placeholder-hero.png"
>
    <div class="mx-auto max-w-4xl">
        <p class="mb-6 text-lg text-zinc-600 dark:text-zinc-400">
            I'm passionate about open-source, green software, and Microsoft AI: you can find blog posts I've written on these topics below - along with other random topics mixed in. You can also find some of my presentations, YouTube videos, and podcasts on the <a href="/speaking" class="text-teal-500 hover:text-teal-600 dark:text-teal-400 dark:hover:text-teal-300">speaking page</a>.
        </p>
        
        {Object.entries(groupedPosts).map(([monthYear, posts]) => (
            <div class="mb-8">
                <h2 class="mb-4 text-2xl font-bold tracking-tight text-zinc-800 dark:text-zinc-100">
                    {monthNames[parseInt(monthYear.split('-')[1]) - 1]} {monthYear.split('-')[0]}
                </h2>
                <div class="grid gap-3 sm:grid-cols-2">
                    {posts.map((post) => (
                        <Card 
                            url={`/blog/${post.slug}/`} 
                            cta="Read post" 
                            hasHeaderBg={true}
                            contentGap="gap-2"
                        >
                            <FormattedDate date={post.data.pubDateTime} slot="title" />
                            <div class="space-y-1">
                                <h3 class="text-base font-semibold text-zinc-800 dark:text-zinc-100">
                                    {post.data.title}
                                </h3>
                                <p class="text-sm text-zinc-600 dark:text-zinc-400 line-clamp-2">
                                    {post.data.description}
                                </p>
                            </div>
                            <div slot="bottom-left" class="flex items-center space-x-1">
                                {post.data.tags?.map((tag: string) => (
                                    <span class="inline-flex items-center rounded-full bg-zinc-100 px-2 py-0.5 text-xs font-medium text-zinc-800 dark:bg-zinc-800 dark:text-zinc-100">
                                        {tag}
                                    </span>
                                ))}
                            </div>
                        </Card>
                    ))}
                </div>
            </div>
        ))}
    </div>
</Layout>
